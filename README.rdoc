= ninja-deploy

Common shared deployment recipes.


== Assumptions

* The user has local tasks to set up variables specfic to the deploying environment (ie. staging, production, etc.).


== Database Recipes

Require the database recipes in your deploy.rb file:

  require 'ninja_deploy/recipes/database'

=== dump

Dependencies:

* The user acting during the deployment must have permissions to dump the MySQL database.

==== To Local File

Dumps the contents of a remote database to a MySQL dump file, scp's the file to /tmp directory.

  cap production db:dump:to_local_file

==== To Local Database

Dumps the contents of a remote database to a MySQL dump file, scp's the file to /tmp directory, loads the locally configured
development database and deletes the local and remote dump files.

  cap production db:dump:to_local_db

Dependencies:

* The configured local development user must have permission to load the database form a MySQL dump file.


== Log Recipes

Require the database recipes in your deploy.rb file:

  require 'ninja_deploy/recipes/log'

=== tail

Tails the remote server's log for the current environment.

  cap production log:tail


== Passenger Recipes

Require the database recipes in your deploy.rb file:

  require 'ninja_deploy/recipes/passenger'

=== restart

Restarts Passenger.

As Callback:

  after "deploy:update_code", "passenger:restart"

From Command-Line:

  cap production passenger:restart


== Sass Recipes

Require the database recipes in your deploy.rb file:

  require 'ninja_deploy/recipes/sass'

=== update

Generates the CSS files from the Sass files.

As Callback:

  before "deploy:restart", "sass:update"

From Command-Line:

  cap production sass:update


== Version Recipes

Require the database recipes in your deploy.rb file:

  require 'ninja_deploy/recipes/version'

=== write

Writes a public/VERSION file to the remote server.

As Callback:

  after "deploy:update_code", "version:write"

Dependencies:

* branch_tag_or_sha_to_deploy variable


== Whenever Recipes

Require the database recipes in your deploy.rb file:

  require 'ninja_deploy/recipes/whenever'

=== update_crontab

Updates the crontab file using whenever.

As Callback:

  after "deploy:update_code", "whenever:update_crontab"

From Command-Line:

  cap production whenever:update_crontab

Dependencies:

* application variable


== Note on Patches/Pull Requests

* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 Ninja Loss. See LICENSE for details.
